

/**
 用某个特定的对象初始化数组
 */
+ (NSMutableArray *)arrayWithObject:(id)obj count:(NSInteger)count;
+ (NSMutableArray *)arrayWithEmptyObjectWithCount:(NSInteger)count;

/**
 *  向子数组中添加元素
 */
- (void)addObject:(id)obj toSubAry:(NSMutableArray *)subAry;

- (void)replaceDicInfoAtIndex:(NSIndexPath *)indexPath value:(NSString *)value;

- (NSString *)stringValueFormIndex:(NSInteger)index;

- (void)resetBoolValues;
- (void)changeBoolValuesAtIndex:(NSInteger)index needReset:(BOOL)need;


+ (NSMutableArray *)arrayWithObject:(id)obj count:(NSInteger)count {
    NSMutableArray *array = [NSMutableArray array];
    for (int i = 0; i < count; i++) {
        [array addObject:obj?:@""];
    }
    
    return array;
}

+ (NSMutableArray *)arrayWithEmptyObjectWithCount:(NSInteger)count {
    NSMutableArray *array = [NSMutableArray array];
    for (int i = 0; i < count; i++) {
        [array addObject:@""];
    }
    
    return array;
}

- (void)addObject:(id)obj toSubAry:(NSMutableArray *)subAry {
    if (subAry) {
        [subAry addObject:obj];
        if (![self containsObject:subAry]) {
            [self addObject:subAry];
        }
    }else {
        subAry = [NSMutableArray array];
        [subAry addObject:obj];
        [self addObject:subAry];
    }
}

- (void)replaceDicInfoAtIndex:(NSIndexPath *)indexPath value:(NSString *)value {
    NSDictionary *dic = self[indexPath.row];
    NSString *val = dic[dic.allKeys.firstObject];
    if ([val isEqualToString:value]) {  // 如果相同就不需要更新
        return;
    }
    
    dic = @{dic.allKeys.firstObject : value};
    [self replaceObjectAtIndex:indexPath.row withObject:dic];
}

- (NSString *)stringValueFormIndex:(NSInteger)index {
    NSMutableString *str = @"".mutableCopy;
    for (NSInteger i = index; i < self.count; i++) {
        [str appendString:self[i]];
    }
    
    return str;
}

- (void)resetBoolValues {
    for(int i = 0; i < self.count; i++) {
        if ([self[i] boolValue]) {
            self[i] = @(NO);
        }
    }
}

- (void)changeBoolValuesAtIndex:(NSInteger)index needReset:(BOOL)need {
    BOOL select = [self[index] boolValue];
    self[index] = @(!select);
    if (need) {
        for(int i = 0; i < self.count; i++) {
            if (i != index && [self[i] boolValue]) {
                self[i] = @(NO);
            }
        }
    }
}

